{"ast":null,"code":"var _jsxFileName = \"/Users/flatironstudentaccount/Development/Module-4/mod_4_project/Front-End/src/DrawingBoard.js\";\nimport React from \"react\";\nconst socket = socketIOClient('http://10.185.2.208:8080');\n\nclass DrawingBoard extends React.Component {\n  constructor() {\n    super();\n\n    this.mouseDown = () => {\n      this.setState({\n        drawing: true\n      });\n    };\n\n    this.mouseUp = () => {\n      this.setState({\n        drawing: false\n      });\n    };\n\n    this.mouseMove = e => {\n      let drawingboard = document.getElementById('drawingboard');\n      let pos = this.getPosition(drawingboard, e);\n      let posX = pos.x;\n      let posY = pos.y;\n      this.draw(this.drawingboard, posX, posY);\n      this.setState({\n        drawingboard: drawingboard\n      });\n    };\n\n    this.getPosition = (canvas, event) => {\n      let drawingboard = document.getElementById('drawingboard');\n      let rect = drawingboard.getBoundingClientRect();\n      return {\n        x: event.clientX - rect.left,\n        y: event.clientY - rect.top\n      };\n    };\n\n    this.draw = (canvas, x, y) => {\n      let drawingboard = document.getElementById('drawingboard');\n      let context = drawingboard.getContext(\"2d\");\n\n      if (this.state.drawing) {\n        context.fillRect(x, y, 5, 5);\n      }\n    };\n\n    this.onButtonPress = (handle, text) => {\n      // debugger\n      socket.emit(\"chat\", {\n        message: text,\n        handle: handle\n      });\n    };\n\n    this.onTyping = handle => {\n      socket.emit('typing', handle);\n    };\n\n    this.onDrawing = drawing => {\n      socket.emit('drawing', drawing);\n    };\n\n    this.state = {\n      displayText: \"\",\n      feedbackText: \"\",\n      id: null,\n      drawing: false,\n      cleared: false,\n      username: null,\n      userList: []\n    };\n  }\n\n  componentDidMount() {\n    console.log(\"component did mount\"); //listen for events\n\n    socket.on(\"chat\", data => {\n      this.setState({\n        displayText: \"\".concat(data.handle, \": \").concat(data.message),\n        feedbackText: \"\"\n      });\n    });\n    socket.on('typing', data => {\n      this.setState({\n        feedbackText: \"\".concat(data, \" is typing a message\")\n      });\n    });\n    socket.on('drawing', data => {});\n  }\n\n  render() {\n    return React.createElement(\"canvas\", {\n      id: \"drawingboard\",\n      onMouseDown: this.mouseDown,\n      onMouseUp: this.mouseUp,\n      onMouseMove: e => this.mouseMove(e),\n      width: \"1000\",\n      height: \"700\",\n      ref: this.state.drawingboard,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default DrawingBoard;","map":{"version":3,"sources":["/Users/flatironstudentaccount/Development/Module-4/mod_4_project/Front-End/src/DrawingBoard.js"],"names":["React","socket","socketIOClient","DrawingBoard","Component","constructor","mouseDown","setState","drawing","mouseUp","mouseMove","e","drawingboard","document","getElementById","pos","getPosition","posX","x","posY","y","draw","canvas","event","rect","getBoundingClientRect","clientX","left","clientY","top","context","getContext","state","fillRect","onButtonPress","handle","text","emit","message","onTyping","onDrawing","displayText","feedbackText","id","cleared","username","userList","componentDidMount","console","log","on","data","render"],"mappings":"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","sourcesContent":["import React from \"react\";\n\nconst socket = socketIOClient('http://10.185.2.208:8080')\n\nclass DrawingBoard extends React.Component {\n  constructor(){\n    super()\n    this.state = {\n      displayText: \"\",\n      feedbackText: \"\",\n      id: null,\n      drawing: false,\n      cleared: false,\n      username: null,\n      userList: []\n    }\n\n  }\n\n  mouseDown = () => {\n    this.setState({\n      drawing: true\n    })\n  }\n\n  mouseUp = () => {\n    this.setState({\n      drawing: false\n    })\n  }\n\n  mouseMove = (e) => {\n    let drawingboard = document.getElementById('drawingboard')\n    let pos = this.getPosition(drawingboard, e);\n    let posX = pos.x;\n    let posY = pos.y;\n    this.draw(this.drawingboard, posX, posY)\n    this.setState({\n      drawingboard: drawingboard\n    })\n  }\n\n  getPosition = (canvas, event) => {\n    let drawingboard = document.getElementById('drawingboard')\n    let rect = drawingboard.getBoundingClientRect();\n    return {\n      x: event.clientX - rect.left,\n      y: event.clientY - rect.top\n    }\n\n  }\n\n  draw = (canvas, x, y) => {\n    let drawingboard = document.getElementById('drawingboard')\n    let context = drawingboard.getContext(\"2d\")\n    if(this.state.drawing) {\n      context.fillRect(x, y, 5, 5)\n    }\n  }\n\n   // emit events\n onButtonPress = (handle, text) => {\n  // debugger\n  socket.emit(\"chat\", {\n    message: text,\n    handle: handle\n  })\n}\n\nonTyping = (handle) => {\n  socket.emit('typing', handle)\n}\n\nonDrawing = (drawing) => {\n  socket.emit('drawing', drawing)\n}\n\n  componentDidMount() {\n    console.log(\"component did mount\")\n  \n    //listen for events\n    socket.on(\"chat\", data => {\n      this.setState({\n        displayText: `${data.handle}: ${data.message}`,\n        feedbackText: \"\"\n      })\n    })\n  \n    socket.on('typing', data => {\n      this.setState({\n        feedbackText: `${data} is typing a message`\n  \n        })\n    })\n  \n    socket.on('drawing', data => {\n      \n    })\n  }\n\n  render() {\n    return (\n      <canvas id={\"drawingboard\"}\n              onMouseDown={this.mouseDown}\n              onMouseUp={this.mouseUp}\n              onMouseMove={(e) => this.mouseMove(e)}\n              width=\"1000\"\n              height=\"700\"\n              ref={this.state.drawingboard}\n              />\n\n    )\n  }\n\n\n}\nexport default DrawingBoard;\n"]},"metadata":{},"sourceType":"module"}